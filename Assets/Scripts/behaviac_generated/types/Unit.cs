// ---------------------------------------------------------------------
// This agent file is auto-generated by behaviac designer, but you should
// implement the methods of the agent class if necessary!
// ---------------------------------------------------------------------

using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.EventSystems;

[behaviac.TypeMetaInfo("Unit", "Unit")]
public class Unit : behaviac.Agent
{
	public string behaviorTree 		= "FSM_Unit_ForceATK";
	protected bool btloadResult 	= false;

	public int userid;
	public int color;
	public int UnitId;
	public int Class;//种类：1兵种，2建筑
	public int Volume;//视觉体积
	public int collisionVolume;//碰撞体积
	public float LifeMax;//最大生命
	public float LifeCur;//当前生命
	public float ATK=10f;//攻击力
	public float DEF=1f;//防御力
	public float MoveSPD=2f;//移动速度
	public float ATKDT = 1f;//攻击间隔
	public float TurnSPD=10f;//转身速度
	public int x;
	public int y;
	public Vector3 Destination;
	//public float Armor;
	public bool canMove;
	public bool canATK;
	public bool Alive;


	// properties
	[behaviac.MemberMetaInfo("isEnmyFound", "isEnmyFound")]
	public bool isEnmyFound = false;
	
	[behaviac.MemberMetaInfo("isGo", "isGo")]
	public bool isGo = false;
	
	// methods

	[behaviac.MethodMetaInfo("Idle", "Idle")]
	public void Idle()
	{
		// Write your logic codes here.
		
	}

	[behaviac.MethodMetaInfo("GotoDes", "GotoDes")]
	public void GotoDes()
	{
		ArriveDes ();
		// Write your logic codes here.
	}

	[behaviac.MethodMetaInfo("Attack", "Attack")]
	public void Attack()
	{
		// Write your logic codes here.
	}
	private bool ArriveDes(){
		//A星寻路
		//移动
		ActTurn();
		ActMove ();
		return true;
	}
	void ActTurn(){
		Vector3 targetdir = Destination - transform.position;
		if (targetdir.magnitude <= 1) {
			isGo = false;
		} else {
			transform.up=targetdir.normalized;
		}

	}
	void ActMove(){
		transform.Translate (transform.up*Time.deltaTime,Space.World);
	}
	private bool SearchEnmy(){
		return true;
	}
	public bool move(Vector3 des){
		Destination.x = des.x;
		Destination.y = des.y;
		Destination.z = 0f;
		isGo = true;
		return true;
	}

	void Start () {
		init ();
	}
	// Update is called once per frame
	void Update () {
		btexec ();
	}
	public bool init(){
		//BehaviacSystem BS = new BehaviacSystem ();
		//BS.Init ();
		//_UnitProperty = gameObject.GetComponent<UnitProperty> ();
		//Debug.Log (_UnitProperty.LifeMax);
		if(behaviorTree.Length > 0)
		{
			btloadResult = btload(behaviorTree, true);
			if(btloadResult)
				btsetcurrent(behaviorTree);
			else
				Debug.LogError("Behavior tree data load failed! " + behaviorTree);
		}
		return true;
	}

}
