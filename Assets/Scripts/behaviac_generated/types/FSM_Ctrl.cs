// ---------------------------------------------------------------------
// This agent file is auto-generated by behaviac designer, but you should
// implement the methods of the agent class if necessary!
// ---------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

[behaviac.TypeMetaInfo("FSM_Ctrl", "FSM_Ctrl")]
public class FSM_Ctrl : behaviac.Agent
{
	// properties
	public string behaviorTree 		= "FSM_Ctrl";
	protected bool btloadResult 	= false;
	string ConstructionPrefabPath="单位/Prefab/";
	GameObject ReadyBuild = null;//准备建造的建筑
	public string Name;
	LayerMask LandMask=1<<8;

	[behaviac.MemberMetaInfo("Status", "Status")]
	public int Status = 0;

	[behaviac.MemberMetaInfo("MouseStatus", "MouseStatus")]
	public int MouseStatus = 0;

	[behaviac.MemberMetaInfo("isConAva", "isConAva")]
	public bool isConAva = false;

	// methods


	[behaviac.MethodMetaInfo("Enter_ReadyConstruct", "Enter_ReadyConstruct")]
	private void Enter_ReadyConstruct()
	{
		// Write your logic codes here.
		Debug.Log("请选择建筑位置");

	}

	[behaviac.MethodMetaInfo("ReadyConstruct", "ReadyConstruct")]
	private void ReadyConstruct()
	{
		// Write your logic codes here.
		if (Input.GetMouseButtonDown (0)) {
			
			MouseStatus = 1;
			ReadyBuild = GameObject.Instantiate (Resources.Load(ConstructionPrefabPath + Name,typeof(GameObject)), new Vector3(0,0,0), Quaternion.identity) as GameObject;
		}
	}

	[behaviac.MethodMetaInfo("Selecting", "Selecting")]
	private void Selecting()
	{
		// Write your logic codes here.
		Debug.Log ("请选择单位");

	}

	[behaviac.MethodMetaInfo("Constructing", "Constructing")]
	private void Constructing()
	{
		// Write your logic codes here.
		//ReadyBuild.transform.position=Input.mousePosition;
		Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
		RaycastHit hit;
		//if(Physics.Raycast(ray,Input.mousePosition,100,FieldMask)
		if(Physics.Raycast(ray,out hit,1000,LandMask)){
			Debug.Log (hit.point);
			ReadyBuild.transform.position=hit.point;
		}

		if (Input.GetMouseButtonUp (0)) {
			isConAva = true;
		}
	}

	void Start () {
		init ();
	}
	// Update is called once per frame
	void Update () {
		btexec ();
	}
	public bool init(){
		BehaviacSystem BS = new BehaviacSystem ();
		BS.Init ();
		Debug.Log("lol");
		//behaviac.Agent.BindInstance (this, "FSM_Ctrl0");
		if(behaviorTree.Length > 0)
		{
			btloadResult = btload(behaviorTree, true);
			if(btloadResult)
				btsetcurrent(behaviorTree);
			else
				Debug.LogError("Behavior tree data load failed! " + behaviorTree);
		}
		return true;
	}
}
